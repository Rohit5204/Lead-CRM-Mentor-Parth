{"version":3,"sources":["app/views/employee/employees/addEmployee.jsx"],"names":["Container","styled","theme","margin","breakpoints","down","marginBottom","AddEmployee","navigate","useNavigate","changePage","useState","firstName","setfirstName","lastName","setlastName","email","setemail","password","setpassword","mobileNo","setmobileNo","alternateMobileNo","setalternateMobileNo","userName","setuserName","items","Date","localStorage","getItem","roleCode","userId","headers","showForm","setShowForm","showForm1","setShowForm1","showForm2","setShowForm2","roleTo","setRoleTo","officeTo","setOfficeTo","id1","setId1","id2","setId2","myOptions3","setMyOptions3","myOptions4","setMyOptions4","userData","setUserData","id3","setId3","myOptions5","setMyOptions5","userTLData","setUserTLData","id4","setId4","myOptions6","setMyOptions6","useEffect","axios","get","BASE_URL","then","res","i","data","length","current","roleName","id","branchName","branchId","roleId","postData","catdurationid","branchid","branchManagerId","teamLeaderId","AddUser","createdBy","lastActive","userRoleId","addedBy","recodStatus","tlId","post","alert","message","catch","error","response","showPassword","setShowPassword","window","managerName","validated","className","routeSegments","name","path","noValidate","onSubmit","e","preventDefault","title","md","Label","Control","required","onChange","target","value","placeholder","Feedback","type","Text","freeSolo","autoComplete","autoHighlight","options","currentTarget","innerHTML","renderInput","params","variant","label","size","disabled","xs","sx","m","minWidth","style","color","width","endAdornment","position","onClick","show","onMouseDown","event","edge"],"mappings":"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","file":"static/js/78.002a6d3c.chunk.js","sourcesContent":["import { styled } from '@mui/system';\r\nimport { Breadcrumb, SimpleCard } from 'app/components';\r\nimport { Form, Row, Col, Button, InputGroup } from 'react-bootstrap';\r\nimport OutlinedInput from '@mui/material/OutlinedInput';\r\nimport InputLabel from '@mui/material/InputLabel';\r\nimport InputAdornment from '@mui/material/InputAdornment';\r\nimport Visibility from '@mui/icons-material/Visibility';\r\nimport VisibilityOff from '@mui/icons-material/VisibilityOff';\r\nimport {\r\n    Box,\r\n    Icon,\r\n    IconButton,\r\n    MenuItem,\r\n    Select,\r\n    Autocomplete,\r\n    FormControl,\r\n    TextField,\r\n} from '@mui/material';\r\nimport React, { useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport { BASE_URL } from 'app/utils/constant';\r\n\r\nconst AddEmployee = () => {\r\n    const navigate = useNavigate();\r\n    const changePage = () => {\r\n        navigate('/employees/manageAllEmployee');\r\n    };\r\n    const [firstName, setfirstName] = useState('');\r\n    const [lastName, setlastName] = useState('');\r\n    const [email, setemail] = useState('');\r\n    const [password, setpassword] = useState('');\r\n    const [mobileNo, setmobileNo] = useState('');\r\n    const [alternateMobileNo, setalternateMobileNo] = useState('');\r\n    const [userName, setuserName] = useState('');\r\n    const date = new Date()\r\n\r\n    const items = localStorage.getItem('accessToken');\r\n    const roleCode = localStorage.getItem('roleCode');\r\n    const userId = localStorage.getItem('userId');\r\n    const headers = {\r\n        \"x-access-token\": items,\r\n        \"roleCode\": roleCode,\r\n        \"userId\": userId\r\n    }\r\n    const [showForm, setShowForm] = useState(false);\r\n    const [showForm1, setShowForm1] = useState(false);\r\n    const [showForm2, setShowForm2] = useState(false);\r\n    const [roleTo, setRoleTo] = useState([]);\r\n    const [officeTo, setOfficeTo] = useState([]);\r\n    const [id1, setId1] = useState([]);\r\n    const [id2, setId2] = useState([]);\r\n    const [myOptions3, setMyOptions3] = useState(null);\r\n    const [myOptions4, setMyOptions4] = useState(null);\r\n\r\n    const [userData, setUserData] = useState([]);\r\n    const [id3, setId3] = useState([]);\r\n    const [myOptions5, setMyOptions5] = useState(null);\r\n\r\n    const [userTLData, setUserTLData] = useState([]);\r\n    const [id4, setId4] = useState([]);\r\n    const [myOptions6, setMyOptions6] = useState(null);\r\n\r\n    useEffect(() => {\r\n        axios.get(BASE_URL + `/api/getMasterData?masterName=rolemaster`,\r\n            { headers: headers }).then((res) => {\r\n                for (var i = 0; i < res.data.data.length; i++) {\r\n                    setRoleTo(current => [...current, res.data.data[i].roleName]);\r\n                    setId1(current => [...current, res.data.data[i].id, res.data.data[i].roleName])\r\n                }\r\n            });\r\n        axios.get(BASE_URL + `/api/getMasterData?masterName=branchmaster`,\r\n            { headers: headers }).then((res) => {\r\n                for (var i = 0; i < res.data.data.length; i++) {\r\n                    setOfficeTo(current => [...current, res.data.data[i].branchName]);\r\n                    setId2(current => [...current, res.data.data[i].branchId, res.data.data[i].branchName])\r\n                }\r\n            });\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        axios.get(BASE_URL + `/api/getMasterData?masterName=usermaster`,\r\n            { headers: headers }).then((res) => {\r\n                for (var i = 0; i < res.data.data.length; i++) {\r\n                    if (res.data.data[i].roleId == 2) {\r\n                        setUserData(current => [...current, res.data.data[i].firstName + \" \"\r\n                            + res.data.data[i].lastName]);\r\n                        setId3(current => [...current, res.data.data[i].userId, res.data.data[i].firstName\r\n                            + \" \" + res.data.data[i].lastName])\r\n                    }\r\n                }\r\n            });\r\n        axios.get(BASE_URL + `/api/getMasterData?masterName=usermaster`,\r\n            { headers: headers }).then((res) => {\r\n                for (var i = 0; i < res.data.data.length; i++) {\r\n                    if (res.data.data[i].roleId == 3) {\r\n                        setUserTLData(current => [...current, res.data.data[i].firstName + \" \"\r\n                            + res.data.data[i].lastName]);\r\n                        setId4(current => [...current, res.data.data[i].userId, res.data.data[i].firstName\r\n                            + \" \" + res.data.data[i].lastName])\r\n                    }\r\n                }\r\n            });\r\n    }, []);\r\n    // const [errorMessage, setErrorMessage] = useState('');\r\n    //Add data in the table\r\n    const postData = async () => {\r\n        var catdurationid, branchid, branchManagerId, teamLeaderId\r\n        for (var i = 0; i < id1.length; i++) {\r\n            if (myOptions3 == id1[i]) {\r\n                catdurationid = id1[i - 1]\r\n            }\r\n        }\r\n        for (var i = 0; i < id2.length; i++) {\r\n            if (myOptions4 == id2[i]) {\r\n                branchid = id2[i - 1]\r\n            }\r\n        }\r\n        for (var i = 0; i < id3.length; i++) {\r\n            if (myOptions5 == id3[i]) {\r\n                branchManagerId = id3[i - 1]\r\n            }\r\n        }\r\n        for (var i = 0; i < id4.length; i++) {\r\n            if (myOptions6 == id4[i]) {\r\n                teamLeaderId = id4[i - 1]\r\n            }\r\n        }\r\n        const AddUser = {\r\n            id: 0,\r\n            firstName: firstName,\r\n            lastName: lastName,\r\n            email: email,\r\n            createdBy: 1,\r\n            lastActive: \"\",\r\n            userRoleId: catdurationid,\r\n            addedBy: 1,\r\n            password: password,\r\n            mobileNo: mobileNo,\r\n            alternateMobileNo: alternateMobileNo,\r\n            userName: userName,\r\n            recodStatus: 1,\r\n            branchId: branchid,\r\n            tlId: teamLeaderId,\r\n            branchManagerId: branchManagerId\r\n        }\r\n        // console.log({ AddUser })\r\n\r\n        await axios.post(BASE_URL + '/api/userMasterUpsert', AddUser,\r\n            { headers: headers }).then((res) => {\r\n                alert(res.data.message)\r\n                changePage();\r\n            }).catch(error => {\r\n                alert(error.response.data.message)\r\n            });\r\n    };\r\n\r\n    const handleSubmit = (e) => {\r\n        e.preventDefault();\r\n        postData();\r\n        // changePage();\r\n    };\r\n    const [showPassword, setShowPassword] = useState(false);\r\n\r\n    const handleClickShowPassword = () => setShowPassword((show) => !show);\r\n\r\n    const handleMouseDownPassword = (event) => {\r\n        event.preventDefault();\r\n    };\r\n    const branchName = window.localStorage.getItem('branchName');\r\n    const managerName = window.localStorage.getItem('userName');\r\n\r\n    const [validated, setValidated] = useState(false);\r\n    const handleSubmit1 = (event) => {\r\n        const form = event.currentTarget;\r\n        if (form.checkValidity() === false) {\r\n            event.preventDefault();\r\n            event.stopPropagation();\r\n            // alert(\"Please Provide appropriate Data\")\r\n        }\r\n        else if (form.checkValidity() != false) {\r\n            postData();\r\n            changePage();\r\n        }\r\n        setValidated(true);\r\n    };\r\n    return (\r\n        <Container>\r\n            <Box className=\"breadcrumb\">\r\n                <Breadcrumb\r\n                    routeSegments={[\r\n                        { name: 'Manage Employee', path: '/employees/manageAllEmployee' },\r\n                        { name: 'Add Employee Page' },\r\n                    ]}\r\n                />\r\n            </Box>\r\n            <Form noValidate validated={validated} onSubmit={handleSubmit}>\r\n                <Row>\r\n                    <Col>\r\n                        <SimpleCard title=\"Fill Employee Detail's\">\r\n                            <Row>\r\n                                <Col md=\"6\">\r\n                                    <Form.Label>First Name</Form.Label>\r\n                                    <Form.Control\r\n                                        required\r\n                                        onChange={(e) => setfirstName(e.target.value)}\r\n                                        value={firstName}\r\n                                        placeholder=\"Enter the First Name\"\r\n                                    /><Form.Control.Feedback type=\"invalid\">\r\n                                        First Name is Required\r\n                                    </Form.Control.Feedback>\r\n                                </Col>\r\n                                <Col md=\"6\">\r\n                                    <Form.Label>Last Name</Form.Label>\r\n                                    <Form.Control\r\n                                        required\r\n                                        onChange={(e) => setlastName(e.target.value)}\r\n                                        value={lastName}\r\n                                        placeholder=\"Enter the Last Name\"\r\n                                    /><Form.Control.Feedback type=\"invalid\">\r\n                                        Last Name is Required\r\n                                    </Form.Control.Feedback>\r\n                                </Col>\r\n                            </Row>\r\n                            <Row>\r\n                                <Col md=\"6\">\r\n                                    <Form.Label>Mobile Number</Form.Label>\r\n                                    <InputGroup>\r\n                                        <InputGroup.Text id=\"basic-addon1\">\r\n                                            <Icon>phone</Icon>\r\n                                        </InputGroup.Text>\r\n                                        <Form.Control\r\n                                            required\r\n                                            onChange={(e) => setmobileNo(e.target.value)}\r\n                                            value={mobileNo}\r\n                                            placeholder=\"Enter the Mobile Number\"\r\n                                        /><Form.Control.Feedback type=\"invalid\">\r\n                                            Mobile Number is Required\r\n                                        </Form.Control.Feedback>\r\n                                    </InputGroup>\r\n                                </Col>\r\n                                <Col md=\"6\">\r\n                                    <Form.Label>Alternate Mobile</Form.Label>\r\n                                    <InputGroup>\r\n                                        <InputGroup.Text id=\"basic-addon1\">\r\n                                            <Icon>phone</Icon>\r\n                                        </InputGroup.Text>\r\n                                        <Form.Control\r\n                                            required\r\n                                            onChange={(e) => setalternateMobileNo(e.target.value)}\r\n                                            value={alternateMobileNo}\r\n                                            placeholder=\"Enter the Alternate Number\"\r\n                                        /></InputGroup>\r\n                                </Col>\r\n                            </Row>\r\n                            <Row>\r\n                                <Col md=\"6\">\r\n                                    <Form.Label>Email</Form.Label>\r\n                                    <InputGroup>\r\n                                        <InputGroup.Text id=\"basic-addon1\">\r\n                                            <Icon>email</Icon>\r\n                                        </InputGroup.Text>\r\n                                        <Form.Control\r\n                                            type='email'\r\n                                            required\r\n                                            onChange={(e) => setemail(e.target.value)}\r\n                                            value={email}\r\n                                            placeholder=\"Enter the personal Email Id\"\r\n                                        /><Form.Control.Feedback type=\"invalid\">\r\n                                            Email is Required\r\n                                        </Form.Control.Feedback>\r\n                                    </InputGroup>\r\n                                </Col>\r\n                                {(function () {\r\n                                    if (roleCode == \"ADMIN\") {\r\n                                        return <>\r\n                                            <Col md=\"6\">\r\n                                                <InputGroup>\r\n                                                    <Form.Label>Role</Form.Label>\r\n                                                </InputGroup>\r\n                                                <Autocomplete\r\n                                                    freeSolo\r\n                                                    autoComplete\r\n                                                    autoHighlight\r\n                                                    options={roleTo}\r\n                                                    value={myOptions3}\r\n                                                    onChange={(e) => {\r\n                                                        setMyOptions3(e.currentTarget.innerHTML);\r\n                                                        if (e.currentTarget.innerHTML == \"Branch Manager\") {\r\n                                                            setShowForm(true);\r\n                                                            setShowForm1(false);\r\n                                                            setShowForm2(false);\r\n                                                        }\r\n                                                        else if (e.currentTarget.innerHTML == \"Team Lead\") {\r\n                                                            setShowForm(false);\r\n                                                            setShowForm1(true);\r\n                                                            setShowForm2(false);\r\n                                                        }\r\n                                                        else if (e.currentTarget.innerHTML == \"Employee\") {\r\n                                                            setShowForm(false);\r\n                                                            setShowForm1(false);\r\n                                                            setShowForm2(true);\r\n                                                        }\r\n                                                        else {\r\n                                                            setShowForm(false);\r\n                                                            setShowForm1(false);\r\n                                                            setShowForm2(false);\r\n                                                        }\r\n                                                    }}\r\n                                                    renderInput={(params) => (\r\n                                                        <TextField\r\n                                                            {...params}\r\n                                                            required\r\n                                                            variant=\"outlined\"\r\n                                                            label=\"Select the Calalogue Duration\"\r\n                                                            size=\"small\"\r\n                                                        />\r\n                                                    )}\r\n                                                />\r\n\r\n                                            </Col>\r\n                                        </>;\r\n                                    }\r\n                                    else {\r\n                                        return <>\r\n                                            <Col md=\"6\">\r\n                                                <Form.Label>Branch Name</Form.Label>\r\n                                                <Form.Control\r\n                                                    disabled\r\n                                                    required\r\n                                                    value={branchName}\r\n                                                    placeholder=\"Enter the Branch Name\"\r\n                                                />\r\n                                            </Col>\r\n                                            <Col md=\"6\">\r\n                                                <Form.Label>Branch Manager</Form.Label>\r\n                                                <Form.Control\r\n                                                    disabled\r\n                                                    required\r\n                                                    // onChange={(e) => setemail(e.target.value)}\r\n                                                    value={managerName}\r\n                                                    placeholder=\"Enter the Branch Manager\"\r\n                                                />\r\n                                            </Col>\r\n                                            <Col xs={6}>\r\n                                                <FormControl sx={{ m: 0, minWidth: 550 }} size=\"small\" >\r\n\r\n                                                    <InputGroup>\r\n                                                        <Form.Label>Role</Form.Label>\r\n                                                    </InputGroup>\r\n                                                    <Select\r\n                                                        value={myOptions3}\r\n                                                        label=\"r\"\r\n                                                        onChange={(e) => setMyOptions3(e.target.value)}\r\n                                                    >\r\n                                                        <MenuItem value={3}>Employee</MenuItem>\r\n                                                        <MenuItem value={4}>Team Lead</MenuItem>\r\n                                                    </Select>\r\n                                                </FormControl>\r\n                                            </Col>\r\n\r\n                                        </>\r\n                                    }\r\n                                })()}\r\n\r\n                            </Row>\r\n                            {(function () {\r\n                                if (myOptions3 == 4) {\r\n                                    return <>\r\n                                        <Row>\r\n                                            <Col md=\"6\">\r\n                                                <InputGroup>\r\n                                                    <Form.Label>Team Leader</Form.Label>\r\n                                                </InputGroup>\r\n                                                <Autocomplete\r\n                                                    freeSolo\r\n                                                    autoComplete\r\n                                                    autoHighlight\r\n                                                    options={userTLData}\r\n                                                    value={myOptions6}\r\n                                                    onChange={(e) => setMyOptions6(e.currentTarget.innerHTML)}\r\n                                                    renderInput={(params) => (\r\n                                                        <TextField\r\n                                                            {...params}\r\n\r\n                                                            variant=\"outlined\"\r\n                                                            label=\"Select the Team Leader\"\r\n                                                            size=\"small\"\r\n                                                        />\r\n                                                    )}\r\n                                                />\r\n                                            </Col>\r\n                                        </Row>\r\n                                    </>;\r\n                                }\r\n                                else {\r\n                                    return <>\r\n                                    </>\r\n                                }\r\n                            })()}\r\n                            {\r\n                                showForm ? (\r\n                                    <Row>\r\n                                        <Col md=\"6\">\r\n                                            <InputGroup>\r\n                                                <Form.Label>Branch</Form.Label>\r\n                                            </InputGroup>\r\n                                            <Autocomplete\r\n                                                freeSolo\r\n                                                autoComplete\r\n                                                autoHighlight\r\n                                                options={officeTo}\r\n                                                value={myOptions4}\r\n                                                onChange={(e) => setMyOptions4(e.currentTarget.innerHTML)}\r\n                                                renderInput={(params) => (\r\n                                                    <TextField\r\n                                                        {...params}\r\n\r\n                                                        variant=\"outlined\"\r\n                                                        label=\"Select the Branch Name\"\r\n                                                        size=\"small\"\r\n                                                    />\r\n                                                )}\r\n                                            />\r\n                                        </Col>\r\n                                    </Row>\r\n\r\n                                ) : (\r\n                                    \"\"\r\n                                )\r\n                            }\r\n                            {\r\n                                showForm1 ? (\r\n                                    <Row>\r\n                                        <Col md=\"6\">\r\n                                            <InputGroup>\r\n                                                <Form.Label>Branch</Form.Label>\r\n                                            </InputGroup>\r\n                                            <Autocomplete\r\n                                                freeSolo\r\n                                                autoComplete\r\n                                                autoHighlight\r\n                                                options={officeTo}\r\n                                                value={myOptions4}\r\n                                                onChange={(e) => setMyOptions4(e.currentTarget.innerHTML)}\r\n                                                renderInput={(params) => (\r\n                                                    <TextField\r\n                                                        {...params}\r\n\r\n                                                        variant=\"outlined\"\r\n                                                        label=\"Select the Branch Name\"\r\n                                                        size=\"small\"\r\n                                                    />\r\n                                                )}\r\n                                            />\r\n                                        </Col>\r\n                                        <Col md=\"6\">\r\n                                            <InputGroup>\r\n                                                <Form.Label>Branch Manager</Form.Label>\r\n                                            </InputGroup>\r\n                                            <Autocomplete\r\n                                                freeSolo\r\n                                                autoComplete\r\n                                                autoHighlight\r\n                                                options={userData}\r\n                                                value={myOptions5}\r\n                                                onChange={(e) => setMyOptions5(e.currentTarget.innerHTML)}\r\n                                                renderInput={(params) => (\r\n                                                    <TextField\r\n                                                        {...params}\r\n\r\n                                                        variant=\"outlined\"\r\n                                                        label=\"Select the Branch Manager\"\r\n                                                        size=\"small\"\r\n                                                    />\r\n                                                )}\r\n                                            />\r\n                                        </Col>\r\n                                    </Row>\r\n                                ) : (\r\n                                    \"\"\r\n                                )\r\n                            }\r\n                            {\r\n                                showForm2 ? (\r\n                                    <>\r\n                                        <Row>\r\n                                            <Col md=\"6\">\r\n                                                <InputGroup>\r\n                                                    <Form.Label>Branch</Form.Label>\r\n                                                </InputGroup>\r\n                                                <Autocomplete\r\n                                                    freeSolo\r\n                                                    autoComplete\r\n                                                    autoHighlight\r\n                                                    options={officeTo}\r\n                                                    value={myOptions4}\r\n                                                    onChange={(e) => setMyOptions4(e.currentTarget.innerHTML)}\r\n                                                    renderInput={(params) => (\r\n                                                        <TextField\r\n                                                            {...params}\r\n\r\n                                                            variant=\"outlined\"\r\n                                                            label=\"Select the Branch Name\"\r\n                                                            size=\"small\"\r\n                                                        />\r\n                                                    )}\r\n                                                />\r\n                                            </Col>\r\n                                            <Col md=\"6\">\r\n                                                <InputGroup>\r\n                                                    <Form.Label>Branch Manager</Form.Label>\r\n                                                </InputGroup>\r\n                                                <Autocomplete\r\n                                                    freeSolo\r\n                                                    autoComplete\r\n                                                    autoHighlight\r\n                                                    options={userData}\r\n                                                    value={myOptions5}\r\n                                                    onChange={(e) => setMyOptions5(e.currentTarget.innerHTML)}\r\n                                                    renderInput={(params) => (\r\n                                                        <TextField\r\n                                                            {...params}\r\n\r\n                                                            variant=\"outlined\"\r\n                                                            label=\"Select the Branch Manager\"\r\n                                                            size=\"small\"\r\n                                                        />\r\n                                                    )}\r\n                                                />\r\n                                            </Col>\r\n                                        </Row>\r\n                                        <Row>\r\n                                            <Col md=\"6\">\r\n                                                <InputGroup>\r\n                                                    <Form.Label>Team Leader</Form.Label>\r\n                                                </InputGroup>\r\n                                                <Autocomplete\r\n                                                    freeSolo\r\n                                                    autoComplete\r\n                                                    autoHighlight\r\n                                                    options={userTLData}\r\n                                                    value={myOptions6}\r\n                                                    onChange={(e) => setMyOptions6(e.currentTarget.innerHTML)}\r\n                                                    renderInput={(params) => (\r\n                                                        <TextField\r\n                                                            {...params}\r\n\r\n                                                            variant=\"outlined\"\r\n                                                            label=\"Select the Team Leader\"\r\n                                                            size=\"small\"\r\n                                                        />\r\n                                                    )}\r\n                                                />\r\n                                            </Col>\r\n                                        </Row>\r\n                                    </>\r\n                                ) : (\r\n                                    \"\"\r\n                                )\r\n                            }\r\n\r\n\r\n                            <br />\r\n                            <h6 style={{ color: 'red' }}>User Credential's </h6>\r\n                            <Row>\r\n                                <Col>\r\n                                    <Form.Label>User Name </Form.Label>\r\n                                    <InputGroup>\r\n                                        <InputGroup.Text id=\"basic-addon1\">\r\n                                            <Icon>person</Icon>\r\n                                        </InputGroup.Text>\r\n                                        <Form.Control\r\n                                            required\r\n                                            onChange={(e) => setuserName(e.target.value)}\r\n                                            value={userName}\r\n                                            placeholder=\"Enter the User Name\"\r\n                                        /><Form.Control.Feedback type=\"invalid\">\r\n                                            User Name is Required\r\n                                        </Form.Control.Feedback>\r\n                                    </InputGroup>\r\n                                </Col>\r\n                                <Col>\r\n\r\n                                    <FormControl sx={{ width: \"100%\" }} variant=\"outlined\" >\r\n                                        <Form.Label>Password </Form.Label>\r\n                                        <OutlinedInput\r\n                                            required\r\n                                            size=\"small\"\r\n                                            id=\"outlined-adornment-password\"\r\n                                            onChange={(e) => setpassword(e.target.value)}\r\n                                            value={password}\r\n                                            type={showPassword ? 'text' : 'password'}\r\n                                            endAdornment={\r\n                                                <InputAdornment position=\"end\">\r\n                                                    <IconButton\r\n                                                        aria-label=\"toggle password visibility\"\r\n                                                        onClick={handleClickShowPassword}\r\n                                                        onMouseDown={handleMouseDownPassword}\r\n                                                        edge=\"end\"\r\n                                                    >\r\n                                                        {showPassword ? <VisibilityOff /> : <Visibility />}\r\n                                                    </IconButton>\r\n                                                </InputAdornment>\r\n                                            }\r\n                                            label=\"h\"\r\n                                        /><Form.Control.Feedback type=\"invalid\">\r\n                                            Password is Required\r\n                                        </Form.Control.Feedback>\r\n                                    </FormControl>\r\n                                    {/* <InputGroup>\r\n                                    <InputGroup.Text id=\"basic-addon1\">\r\n                                        <Icon>password</Icon>\r\n                                    </InputGroup.Text>\r\n                                    <Form.Control\r\n                                        type='password'\r\n                                        required\r\n                                        onChange={(e) => setpassword(e.target.value)}\r\n                                        value={password}\r\n                                        placeholder=\"Enter the Password\"\r\n                                    /></InputGroup> */}\r\n                                </Col>\r\n                            </Row>\r\n                        </SimpleCard>\r\n                    </Col>\r\n                </Row>\r\n                <br />\r\n                <Row>\r\n                    <Col className=\"d-flex justify-content-center\">\r\n                        <Button variant=\"secondary\" onClick={changePage}>\r\n                            Cancel\r\n                        </Button>\r\n                        &nbsp;\r\n                        <button type=\"submit\" className=\"btn btn-success\">\r\n                            Save\r\n                        </button>\r\n                    </Col>\r\n                </Row>\r\n\r\n            </Form>\r\n        </Container >\r\n    );\r\n};\r\n// Custom Style Section\r\nconst Container = styled('div')(({ theme }) => ({\r\n    margin: '30px',\r\n    [theme.breakpoints.down('sm')]: { margin: '16px' },\r\n    '& .breadcrumb': {\r\n        marginBottom: '30px',\r\n        [theme.breakpoints.down('sm')]: { marginBottom: '16px' },\r\n    },\r\n}));\r\nconst Div = styled('div')(() => ({\r\n    margin: '0px 0px 0px 441px',\r\n}));\r\nexport default AddEmployee;\r\n"],"sourceRoot":""}