{"version":3,"sources":["app/views/myDeals/myDeal/recovery/reminderMail.jsx","app/views/myDeals/myDeal/recovery/manageRecovery.jsx"],"names":["ReminderMail","theClientMail","handleDialog","headers","localStorage","getItem","useState","invoiceNumber","clientName","clientEmail","productName","instalmentAmount","instalmentDate","Row","Col","Form","Label","Control","disabled","value","Date","toLocaleDateString","type","className","style","margin","onClick","mailBody","invoiceNo","itemName","date","amount","emailId","emailTemplateId","axios","post","BASE_URL","sendReminderMail","Container","styled","theme","breakpoints","down","marginBottom","StyledTable","Table","whiteSpace","paddingLeft","paddingRight","ManageRecovery","sendMailObj","setSendMailObj","showMail","setShowMail","handleCloseMail","useNavigate","userData","setUserData","firstdate","moment","startOf","format","lastdate","endOf","startDate","setstartDate","endDate","setendDate","useEffect","fromDate","toDate","userId","then","response","data","Box","routeSegments","name","path","md","htmlFor","InputGroup","onChange","e","target","width","overflow","TableHead","borderLeft","borderRight","TableRow","TableCell","align","TableBody","map","subscriber","index","fineAmount","hasPaid","Chip","color","label","IconButton","handleSendMail","Icon","to","state","Modal","show","onHide","backdrop","keyboard","size","centered","Header","Title","Body","Footer","marginTop"],"mappings":"qQA2GeA,EAtGM,SAAC,GAAqC,IAAnCC,EAAkC,EAAlCA,cAAeC,EAAmB,EAAnBA,aAK7BC,EAAU,CACZ,iBAJUC,aAAaC,QAAQ,eAK/B,SAJaD,aAAaC,QAAQ,YAKlC,OAJWD,aAAaC,QAAQ,WAMpC,EAAwBC,mBAASL,EAAcM,eAAxCA,EAAP,oBACA,EAAqBD,mBAASL,EAAcO,YAArCA,EAAP,oBACA,EAAsBF,mBAASL,EAAcQ,aAAtCA,EAAP,oBACA,EAAsBH,mBAASL,EAAcS,aAAtCA,EAAP,oBACA,EAA2BJ,mBAASL,EAAcU,kBAA3CA,EAAP,oBACA,EAAyBL,mBAASL,EAAcW,gBAAzCA,EAAP,oBAmBA,OACI,gCACI,eAACC,EAAA,EAAD,WACI,eAACC,EAAA,EAAD,WACI,cAACC,EAAA,EAAKC,MAAN,6BACA,cAACD,EAAA,EAAKE,QAAN,CACIC,UAAQ,EACRC,MAAOZ,OAGf,eAACO,EAAA,EAAD,WACI,cAACC,EAAA,EAAKC,MAAN,2BACA,cAACD,EAAA,EAAKE,QAAN,CACIC,UAAQ,EACRC,MAAOV,UAInB,eAACI,EAAA,EAAD,WACI,eAACC,EAAA,EAAD,WACI,cAACC,EAAA,EAAKC,MAAN,0BACA,cAACD,EAAA,EAAKE,QAAN,CACIC,UAAQ,EACRC,MAAOX,OAGf,eAACM,EAAA,EAAD,WACI,cAACC,EAAA,EAAKC,MAAN,iCACA,cAACD,EAAA,EAAKE,QAAN,CACIC,UAAQ,EACRC,MAAOR,UAMnB,eAACE,EAAA,EAAD,WACI,eAACC,EAAA,EAAD,WACI,cAACC,EAAA,EAAKC,MAAN,2BACA,cAACD,EAAA,EAAKE,QAAN,CACIC,UAAQ,EACRC,MAAOT,OAGf,eAACI,EAAA,EAAD,WACI,cAACC,EAAA,EAAKC,MAAN,+BACA,cAACD,EAAA,EAAKE,QAAN,CACIC,UAAQ,EACRC,MAAO,IAAIC,KAAKR,GAAgBS,mBAAmB,iBAO/D,8BACI,wBAAQC,KAAK,SACTC,UAAU,kBACVC,MAAO,CAAEC,OAAQ,OACjBC,QA/DS,YAbA,WACrB,IAAMC,EAAW,CACbC,UAAWrB,EACXsB,SAAU,eACVC,KAAMlB,EACNmB,OAAQpB,EACRqB,QAASvB,EACTwB,gBAAiB,GAErBC,IAAMC,KAAKC,IAAW,wBAAyBT,EAAU,CACrDxB,QAASA,IAIbkC,GACAnC,KA0DQ,wB,sHCzEVoC,EAAYC,YAAO,MAAPA,EAAc,kBAAGC,EAAH,EAAGA,MAAH,UAC5Bf,OAAQ,QADoB,cAE3Be,EAAMC,YAAYC,KAAK,MAAQ,CAAEjB,OAAQ,SAFd,cAG5B,gBAH4B,aAIxBkB,aAAc,QACbH,EAAMC,YAAYC,KAAK,MAAQ,CAAEC,aAAc,UALxB,KAQ1BC,EAAcL,YAAOM,IAAPN,EAAc,iBAAO,CACrCO,WAAY,MACZ,UAAW,CACP,OAAQ,CAAE,OAAQ,CAAEC,YAAa,EAAGC,aAAc,KAEtD,UAAW,CACP,OAAQ,CAAE,OAAQ,CAAED,YAAa,SAiK1BE,UA7JQ,WAGnB,MAAsC3C,mBAAS,MAA/C,mBAAO4C,EAAP,KAAoBC,EAApB,KACA,EAAgC7C,oBAAS,GAAzC,mBAAO8C,EAAP,KAAiBC,EAAjB,KACMC,EAAkB,kBAAMD,GAAY,IAU1C,GAJiBE,cAIejD,mBAAS,KAAzC,mBAAOkD,EAAP,KAAiBC,EAAjB,KAIMtD,EAAU,CACZ,iBAJUC,aAAaC,QAAQ,eAK/B,SAJaD,aAAaC,QAAQ,YAKlC,OAJWD,aAAaC,QAAQ,WAM9BqD,EAAYC,MAASC,QAAQ,SAASC,OAAO,cAC7CC,EAAWH,MAASI,MAAM,SAASF,OAAO,cAEhD,EAAkCvD,mBAASoD,GAA3C,mBAAOM,EAAP,KAAkBC,EAAlB,KACA,EAA8B3D,mBAASwD,GAAvC,mBAAOI,EAAP,KAAgBC,EAAhB,KAeA,OAJAC,qBAAU,WARNlC,IAAMC,KAAKC,IAAQ,6BAAiC,CAChDiC,SAAUL,EACVM,OAAQJ,EACRK,OAAQ,GACT,CAAEpE,QAASA,IAAWqE,MAAK,SAACC,GAC3BhB,EAAYgB,EAASC,KAAKA,WAK/B,CAAClB,IAGA,cAAClB,EAAD,UACI,eAACqC,EAAA,EAAD,WACI,cAACA,EAAA,EAAD,CAAKpD,UAAU,aAAf,SACI,cAAC,IAAD,CACIqD,cAAe,CACX,CAAEC,KAAM,gBAAiBC,KAAM,mCAC/B,CAAED,KAAM,6BAIpB,cAACF,EAAA,EAAD,UACI,cAAC9D,EAAA,EAAD,UACI,eAACC,EAAA,EAAD,CAAKiE,GAAG,IAAR,UACI,cAAChE,EAAA,EAAKC,MAAN,CAAYgE,QAAQ,YAApB,8FACA,eAACC,EAAA,EAAD,CAAY1D,UAAU,OAAtB,UACI,cAACR,EAAA,EAAKE,QAAN,CACIE,MAAO6C,EACPkB,SAAU,SAACC,GAAD,OAAOlB,EAAakB,EAAEC,OAAOjE,QACvCG,KAAK,SACT,cAACP,EAAA,EAAKE,QAAN,CACIE,MAAO+C,EACPgB,SAAU,SAACC,GAAD,OAAOhB,EAAWgB,EAAEC,OAAOjE,QACrCG,KAAK,mBAQzB,eAACqD,EAAA,EAAD,CAAKpD,UAAU,cAAc8D,MAAM,OAAOC,SAAS,OAAnD,UAEI,+CACA,eAAC1C,EAAD,CAAarB,UAAU,qCAAqCC,MAAO,CAAE,aAAgB,OAArF,UACI,cAAC+D,EAAA,EAAD,CAAW/D,MAAO,CAAEgE,WAAY,gBAAiBC,YAAa,iBAAmBlE,UAAU,cAA3F,SACI,eAACmE,EAAA,EAAD,WACI,cAACC,EAAA,EAAD,CAAWC,MAAM,SAAjB,wBACA,cAACD,EAAA,EAAD,CAAWC,MAAM,SAAjB,yBACA,cAACD,EAAA,EAAD,CAAWC,MAAM,SAAjB,sBACA,cAACD,EAAA,EAAD,CAAWC,MAAM,SAAjB,wBACA,cAACD,EAAA,EAAD,CAAWC,MAAM,SAAjB,yBACA,cAACD,EAAA,EAAD,CAAWC,MAAM,SAAjB,oBACA,cAACD,EAAA,EAAD,CAAWC,MAAM,SAAjB,yBAGR,cAACC,EAAA,EAAD,UACKrC,EAASsC,KAAI,SAACC,EAAYC,GAEvB,OACI,eAACN,EAAA,EAAD,WACI,cAACC,EAAA,EAAD,CAAWC,MAAM,SAAjB,SAA2BG,EAAWxF,gBACtC,cAACoF,EAAA,EAAD,CAAWC,MAAM,SAAjB,SAA2BG,EAAWvF,aACtC,cAACmF,EAAA,EAAD,CAAWC,MAAM,SAAjB,SAA2B,IAAIxE,KAAK2E,EAAWnF,gBAAgBS,mBAAmB,WAClF,eAACsE,EAAA,EAAD,CAAWC,MAAM,SAAjB,oBAA6BG,EAAWpF,oBACxC,eAACgF,EAAA,EAAD,CAAWC,MAAM,SAAjB,oBAAsD,MAAzBG,EAAWE,WAAqB,EAAIF,EAAWE,cAC5E,cAACN,EAAA,EAAD,CAAWC,MAAM,SAAjB,SAC2B,GAAtBG,EAAWG,QACR,cAACC,EAAA,EAAD,CAAMC,MAAM,UAAUC,MAAM,SAE5B,cAACF,EAAA,EAAD,CAAMC,MAAM,UAAUC,MAAM,eAGpC,eAACV,EAAA,EAAD,CAAWC,MAAM,SAAjB,UACI,cAACU,EAAA,EAAD,CAAY5E,QAAS,kBApGtC,SAACqE,GACpB5C,EAAe4C,GACf1C,GAAY,GAkGmDkD,CAAeR,IAA1C,SACI,cAACS,EAAA,EAAD,CAAMJ,MAAM,MAAZ,oBAEJ,cAAC,IAAD,CAAMK,GAAG,2CAA2CC,MAAOX,EAA3D,SACI,cAACO,EAAA,EAAD,UACI,cAACE,EAAA,EAAD,CAAMJ,MAAM,UAAZ,2BAnBDJ,cA8BnC,eAACW,EAAA,EAAD,CACIC,KAAMxD,EACNyD,OAAQvD,EACRwD,SAAS,SACTC,UAAU,EACVC,KAAK,KACL,kBAAgB,gCAChBC,UAAQ,EAPZ,UASI,eAACN,EAAA,EAAMO,OAAP,WACI,cAACP,EAAA,EAAMQ,MAAP,iCACA,cAACb,EAAA,EAAD,CAAYhF,KAAK,SAASI,QAAS4B,EAAnC,SACI,cAAC,IAAD,SAGR,cAACqD,EAAA,EAAMS,KAAP,UACI,cAAC,EAAD,CAAcnH,cAAeiD,EAAahD,aAAcoD,MAE5D,cAACqD,EAAA,EAAMU,OAAP,UACI,wBACI/F,KAAK,SACLC,UAAU,gBACVC,MAAO,CAAE8F,UAAW,OACpB5F,QAAS4B,EAJb","file":"static/js/91.6d22d5b8.chunk.js","sourcesContent":["import { BASE_URL } from \"app/utils/constant\";\r\nimport axios from \"axios\";\r\nimport React, { useState } from \"react\";\r\nimport { Form, Row, Col, Button, InputGroup } from 'react-bootstrap';\r\n\r\nconst ReminderMail = ({ theClientMail, handleDialog }) => {\r\n    // console.log(theClientMail)\r\n    const items = localStorage.getItem('accessToken');\r\n    const roleCode = localStorage.getItem('roleCode');\r\n    const userId = localStorage.getItem('userId');\r\n    const headers = {\r\n        \"x-access-token\": items,\r\n        \"roleCode\": roleCode,\r\n        \"userId\": userId\r\n    }\r\n    const [invoiceNumber] = useState(theClientMail.invoiceNumber);\r\n    const [clientName] = useState(theClientMail.clientName);\r\n    const [clientEmail] = useState(theClientMail.clientEmail);\r\n    const [productName] = useState(theClientMail.productName)\r\n    const [instalmentAmount] = useState(theClientMail.instalmentAmount)\r\n    const [instalmentDate] = useState(theClientMail.instalmentDate)\r\n\r\n    const sendReminderMail = () => {\r\n        const mailBody = {\r\n            invoiceNo: invoiceNumber,\r\n            itemName: \"Stock Option\",\r\n            date: instalmentDate,\r\n            amount: instalmentAmount,\r\n            emailId: clientEmail,\r\n            emailTemplateId: 3\r\n        }\r\n        axios.post(BASE_URL + '/api/sendReminderMail', mailBody, {\r\n            headers: headers\r\n        })\r\n    }\r\n    const handleSubmission = () => {\r\n        sendReminderMail()\r\n        handleDialog();\r\n    };\r\n    return (\r\n        <div>\r\n            <Row>\r\n                <Col>\r\n                    <Form.Label>Invoice Number</Form.Label>\r\n                    <Form.Control\r\n                        disabled\r\n                        value={invoiceNumber}\r\n                    />\r\n                </Col>\r\n                <Col>\r\n                    <Form.Label>Client Email</Form.Label>\r\n                    <Form.Control\r\n                        disabled\r\n                        value={clientEmail}\r\n                    />\r\n                </Col>\r\n            </Row>\r\n            <Row>\r\n                <Col>\r\n                    <Form.Label>Client Name</Form.Label>\r\n                    <Form.Control\r\n                        disabled\r\n                        value={clientName}\r\n                    />\r\n                </Col>\r\n                <Col>\r\n                    <Form.Label>Installment Amount</Form.Label>\r\n                    <Form.Control\r\n                        disabled\r\n                        value={instalmentAmount}\r\n\r\n                    />\r\n                    {/* <input type=\"file\" name=\"file\" onChange={changeHandler} /> */}\r\n                </Col>\r\n            </Row>\r\n            <Row>\r\n                <Col>\r\n                    <Form.Label>Product Name</Form.Label>\r\n                    <Form.Control\r\n                        disabled\r\n                        value={productName}\r\n                    />\r\n                </Col>\r\n                <Col>\r\n                    <Form.Label>Installment Date</Form.Label>\r\n                    <Form.Control\r\n                        disabled\r\n                        value={new Date(instalmentDate).toLocaleDateString('en-GB')}\r\n\r\n                    />\r\n                    {/* <input type=\"file\" name=\"file\" onChange={changeHandler} /> */}\r\n                </Col>\r\n            </Row>\r\n\r\n            <div>\r\n                <button type=\"submit\"\r\n                    className=\"btn btn-success\"\r\n                    style={{ margin: 5 + 'px' }}\r\n                    onClick={handleSubmission}\r\n                >\r\n                    Send\r\n                </button>\r\n            </div>\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default ReminderMail;","import { styled } from '@mui/system';\r\nimport { Breadcrumb } from 'app/components';\r\nimport React, { useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\nimport { Form, Row, Col, Modal, InputGroup } from 'react-bootstrap';\r\nimport { useNavigate, Link } from 'react-router-dom';\r\nimport ReminderMail from './reminderMail';\r\nimport ClearIcon from '@mui/icons-material/Clear';\r\nimport moment from 'moment/moment';\r\nimport {\r\n    Box,\r\n    Icon,\r\n    Chip,\r\n    IconButton,\r\n    Table,\r\n    TableBody,\r\n    TableCell,\r\n    TableHead,\r\n    TableRow,\r\n} from '@mui/material';\r\nimport { BASE_URL } from 'app/utils/constant';\r\n\r\nconst Container = styled('div')(({ theme }) => ({\r\n    margin: '30px',\r\n    [theme.breakpoints.down('sm')]: { margin: '16px' },\r\n    '& .breadcrumb': {\r\n        marginBottom: '30px',\r\n        [theme.breakpoints.down('sm')]: { marginBottom: '16px' },\r\n    },\r\n}));\r\nconst StyledTable = styled(Table)(() => ({\r\n    whiteSpace: 'pre',\r\n    '& thead': {\r\n        '& tr': { '& th': { paddingLeft: 0, paddingRight: 0 } },\r\n    },\r\n    '& tbody': {\r\n        '& tr': { '& td': { paddingLeft: 0 } },\r\n    },\r\n}));\r\n\r\nconst ManageRecovery = () => {\r\n    // const [APIData, setAPIData] = useState([]);\r\n\r\n    const [sendMailObj, setSendMailObj] = useState(null);\r\n    const [showMail, setShowMail] = useState(false);\r\n    const handleCloseMail = () => setShowMail(false);\r\n\r\n    const handleSendMail = (subscriber) => {\r\n        setSendMailObj(subscriber);\r\n        setShowMail(true);\r\n    };\r\n    const navigate = useNavigate();\r\n    const changePage = () => {\r\n        navigate('/employees/addEmployee');\r\n    };\r\n    const [userData, setUserData] = useState([]);\r\n    const items = localStorage.getItem('accessToken');\r\n    const roleCode = localStorage.getItem('roleCode');\r\n    const userId = localStorage.getItem('userId');\r\n    const headers = {\r\n        \"x-access-token\": items,\r\n        \"roleCode\": roleCode,\r\n        \"userId\": userId\r\n    }\r\n    const firstdate = moment().startOf('month').format('YYYY-MM-DD');\r\n    const lastdate = moment().endOf('month').format(\"YYYY-MM-DD\");\r\n\r\n    const [startDate, setstartDate] = useState(firstdate)\r\n    const [endDate, setendDate] = useState(lastdate)\r\n    //get method\r\n    const fetchRecovery = () => {\r\n        axios.post(BASE_URL + `/api/getPendingInstalments`, {\r\n            fromDate: startDate,\r\n            toDate: endDate,\r\n            userId: 1\r\n        }, { headers: headers }).then((response) => {\r\n            setUserData(response.data.data);\r\n        });\r\n    }\r\n    useEffect(() => {\r\n        fetchRecovery()\r\n    }, [userData]);\r\n\r\n    return (\r\n        <Container>\r\n            <Box>\r\n                <Box className=\"breadcrumb\">\r\n                    <Breadcrumb\r\n                        routeSegments={[\r\n                            { name: 'Recovery List', path: '/myDeal/recovery/manageRecovery' },\r\n                            { name: 'Installment Recovery' },\r\n                        ]}\r\n                    />\r\n                </Box>\r\n                <Box>\r\n                    <Row>\r\n                        <Col md=\"6\">\r\n                            <Form.Label htmlFor=\"basic-url\">Apply Date Range (By Default Current Month Start Date and End Date is selected) </Form.Label>\r\n                            <InputGroup className=\"mb-3\">\r\n                                <Form.Control\r\n                                    value={startDate}\r\n                                    onChange={(e) => setstartDate(e.target.value)}\r\n                                    type=\"date\" />\r\n                                <Form.Control\r\n                                    value={endDate}\r\n                                    onChange={(e) => setendDate(e.target.value)}\r\n                                    type=\"date\" />\r\n\r\n                            </InputGroup>\r\n                        </Col>\r\n\r\n                    </Row>\r\n                </Box>\r\n\r\n                <Box className=\"text-center\" width=\"100%\" overflow=\"auto\">\r\n                    {/* Table Section */}\r\n                    <h4>Recovery List</h4>\r\n                    <StyledTable className=\"table table-striped table-bordered\" style={{ 'borderRadius': '1px' }}>\r\n                        <TableHead style={{ borderLeft: '1px solid red', borderRight: '1px solid red' }} className='text-center'>\r\n                            <TableRow>\r\n                                <TableCell align=\"center\">Invoice No</TableCell>\r\n                                <TableCell align=\"center\">Client Name</TableCell>\r\n                                <TableCell align=\"center\">EMI Date</TableCell>\r\n                                <TableCell align=\"center\">EMI Amount</TableCell>\r\n                                <TableCell align=\"center\">Fine Amount</TableCell>\r\n                                <TableCell align=\"center\">Status</TableCell>\r\n                                <TableCell align=\"center\">Action</TableCell>\r\n                            </TableRow>\r\n                        </TableHead>\r\n                        <TableBody>\r\n                            {userData.map((subscriber, index) => {\r\n                                // if (subscriber.status == 1) {\r\n                                return (\r\n                                    <TableRow key={index}>\r\n                                        <TableCell align=\"center\">{subscriber.invoiceNumber}</TableCell>\r\n                                        <TableCell align=\"center\">{subscriber.clientName}</TableCell>\r\n                                        <TableCell align=\"center\">{new Date(subscriber.instalmentDate).toLocaleDateString('en-GB')}</TableCell>\r\n                                        <TableCell align=\"center\">₹ {subscriber.instalmentAmount}</TableCell>\r\n                                        <TableCell align=\"center\">₹ {subscriber.fineAmount == null ? 0 : subscriber.fineAmount}</TableCell>\r\n                                        <TableCell align=\"center\">\r\n                                            {subscriber.hasPaid == 1 ? (\r\n                                                <Chip color=\"success\" label=\"Paid\" />\r\n                                            ) : (\r\n                                                <Chip color=\"warning\" label=\"Not Paid\" />\r\n                                            )}\r\n                                        </TableCell>\r\n                                        <TableCell align=\"center\">\r\n                                            <IconButton onClick={() => handleSendMail(subscriber)}>\r\n                                                <Icon color=\"red\">mail</Icon>\r\n                                            </IconButton>\r\n                                            <Link to=\"/myDeal/recovery/editRecoveryInstallment\" state={subscriber}>\r\n                                                <IconButton>\r\n                                                    <Icon color=\"success\">edit</Icon>\r\n                                                </IconButton>\r\n                                            </Link>\r\n                                        </TableCell>\r\n                                    </TableRow>\r\n                                );\r\n                                // }\r\n                            })}\r\n                        </TableBody>\r\n                    </StyledTable>\r\n                </Box>\r\n                <Modal\r\n                    show={showMail}\r\n                    onHide={handleCloseMail}\r\n                    backdrop=\"static\"\r\n                    keyboard={false}\r\n                    size=\"lg\"\r\n                    aria-labelledby=\"contained-modal-title-vcenter\"\r\n                    centered\r\n                >\r\n                    <Modal.Header>\r\n                        <Modal.Title>Send Reminder Mail</Modal.Title>\r\n                        <IconButton type=\"button\" onClick={handleCloseMail}>\r\n                            <ClearIcon />\r\n                        </IconButton>\r\n                    </Modal.Header>\r\n                    <Modal.Body>\r\n                        <ReminderMail theClientMail={sendMailObj} handleDialog={handleCloseMail}></ReminderMail>\r\n                    </Modal.Body>\r\n                    <Modal.Footer>\r\n                        <button\r\n                            type=\"submit\"\r\n                            className=\"btn btn-error\"\r\n                            style={{ marginTop: 5 + 'px' }}\r\n                            onClick={handleCloseMail}\r\n                        >\r\n                            Cancel\r\n                        </button>\r\n                    </Modal.Footer>\r\n                </Modal>\r\n            </Box>\r\n        </Container>\r\n    );\r\n};\r\n\r\nexport default ManageRecovery;\r\n"],"sourceRoot":""}