{"version":3,"sources":["app/views/employee/employees/addEmployee.jsx"],"names":["Container","styled","theme","margin","breakpoints","down","marginBottom","Div","AddEmployee","navigate","useNavigate","changePage","useState","firstName","setfirstName","lastName","setlastName","email","setemail","password","setpassword","mobileNo","setmobileNo","alternateMobileNo","setalternateMobileNo","userName","setuserName","items","Date","localStorage","getItem","roleCode","userId","headers","showForm","setShowForm","showForm1","setShowForm1","showForm2","setShowForm2","roleTo","setRoleTo","officeTo","setOfficeTo","id1","setId1","id2","setId2","myOptions3","setMyOptions3","myOptions4","setMyOptions4","userData","setUserData","id3","setId3","myOptions5","setMyOptions5","userTLData","setUserTLData","id4","setId4","myOptions6","setMyOptions6","useEffect","axios","get","then","res","i","data","length","current","roleName","id","branchName","branchId","roleId","postData","catdurationid","branchid","branchManagerId","teamLeaderId","AddUser","createdBy","lastActive","userRoleId","addedBy","recodStatus","tlId","post","catch","error","response","alert","message","console","log","status","request","showPassword","setShowPassword","window","managerName","validated","setValidated","className","routeSegments","name","path","noValidate","onSubmit","event","form","currentTarget","checkValidity","preventDefault","stopPropagation","title","md","Label","Control","required","onChange","e","target","value","placeholder","Feedback","type","Text","freeSolo","autoComplete","autoHighlight","options","innerHTML","renderInput","params","variant","label","size","disabled","xs","sx","m","minWidth","style","color","width","endAdornment","position","onClick","show","onMouseDown","edge"],"mappings":"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","file":"static/js/77.fd103577.chunk.js","sourcesContent":["import { styled } from '@mui/system';\r\nimport { Breadcrumb, SimpleCard } from 'app/components';\r\nimport { Form, Row, Col, Button, InputGroup } from 'react-bootstrap';\r\nimport OutlinedInput from '@mui/material/OutlinedInput';\r\nimport InputLabel from '@mui/material/InputLabel';\r\nimport InputAdornment from '@mui/material/InputAdornment';\r\nimport Visibility from '@mui/icons-material/Visibility';\r\nimport VisibilityOff from '@mui/icons-material/VisibilityOff';\r\nimport {\r\n    Box,\r\n    Icon,\r\n    IconButton,\r\n    MenuItem,\r\n    Select,\r\n    Autocomplete,\r\n    FormControl,\r\n    TextField,\r\n} from '@mui/material';\r\nimport React, { useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\nimport { useNavigate } from 'react-router-dom';\r\n\r\nconst AddEmployee = () => {\r\n    const navigate = useNavigate();\r\n    const changePage = () => {\r\n        navigate('/employees/manageAllEmployee');\r\n    };\r\n    const [firstName, setfirstName] = useState('');\r\n    const [lastName, setlastName] = useState('');\r\n    const [email, setemail] = useState('');\r\n    const [password, setpassword] = useState('');\r\n    const [mobileNo, setmobileNo] = useState('');\r\n    const [alternateMobileNo, setalternateMobileNo] = useState('');\r\n    const [userName, setuserName] = useState('');\r\n    const date = new Date()\r\n\r\n    const items = localStorage.getItem('accessToken');\r\n    const roleCode = localStorage.getItem('roleCode');\r\n    const userId = localStorage.getItem('userId');\r\n    const headers = {\r\n        \"x-access-token\": items,\r\n        \"roleCode\": roleCode,\r\n        \"userId\": userId\r\n    }\r\n    const [showForm, setShowForm] = useState(false);\r\n    const [showForm1, setShowForm1] = useState(false);\r\n    const [showForm2, setShowForm2] = useState(false);\r\n    const [roleTo, setRoleTo] = useState([]);\r\n    const [officeTo, setOfficeTo] = useState([]);\r\n    const [id1, setId1] = useState([]);\r\n    const [id2, setId2] = useState([]);\r\n    const [myOptions3, setMyOptions3] = useState(null);\r\n    const [myOptions4, setMyOptions4] = useState(null);\r\n\r\n    const [userData, setUserData] = useState([]);\r\n    const [id3, setId3] = useState([]);\r\n    const [myOptions5, setMyOptions5] = useState(null);\r\n\r\n    const [userTLData, setUserTLData] = useState([]);\r\n    const [id4, setId4] = useState([]);\r\n    const [myOptions6, setMyOptions6] = useState(null);\r\n\r\n    useEffect(() => {\r\n        axios.get(`https://43.204.38.243:3001/api/getMasterData?masterName=rolemaster`,\r\n            { headers: headers }).then((res) => {\r\n                for (var i = 0; i < res.data.data.length; i++) {\r\n                    setRoleTo(current => [...current, res.data.data[i].roleName]);\r\n                    setId1(current => [...current, res.data.data[i].id, res.data.data[i].roleName])\r\n                }\r\n            });\r\n        axios.get(`https://43.204.38.243:3001/api/getMasterData?masterName=branchmaster`,\r\n            { headers: headers }).then((res) => {\r\n                for (var i = 0; i < res.data.data.length; i++) {\r\n                    setOfficeTo(current => [...current, res.data.data[i].branchName]);\r\n                    setId2(current => [...current, res.data.data[i].branchId, res.data.data[i].branchName])\r\n                }\r\n            });\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        axios.get(`https://43.204.38.243:3001/api/getMasterData?masterName=usermaster`,\r\n            { headers: headers }).then((res) => {\r\n                for (var i = 0; i < res.data.data.length; i++) {\r\n                    if (res.data.data[i].roleId == 2) {\r\n                        setUserData(current => [...current, res.data.data[i].firstName + \" \"\r\n                            + res.data.data[i].lastName]);\r\n                        setId3(current => [...current, res.data.data[i].userId, res.data.data[i].firstName\r\n                            + \" \" + res.data.data[i].lastName])\r\n                    }\r\n                }\r\n            });\r\n        axios.get(`https://43.204.38.243:3001/api/getMasterData?masterName=usermaster`,\r\n            { headers: headers }).then((res) => {\r\n                for (var i = 0; i < res.data.data.length; i++) {\r\n                    if (res.data.data[i].roleId == 3) {\r\n                        setUserTLData(current => [...current, res.data.data[i].firstName + \" \"\r\n                            + res.data.data[i].lastName]);\r\n                        setId4(current => [...current, res.data.data[i].userId, res.data.data[i].firstName\r\n                            + \" \" + res.data.data[i].lastName])\r\n                    }\r\n                }\r\n            });\r\n    }, []);\r\n    // const [errorMessage, setErrorMessage] = useState('');\r\n    //Add data in the table\r\n    const postData = async () => {\r\n        var catdurationid, branchid, branchManagerId, teamLeaderId\r\n        for (var i = 0; i < id1.length; i++) {\r\n            if (myOptions3 == id1[i]) {\r\n                catdurationid = id1[i - 1]\r\n            }\r\n        }\r\n        for (var i = 0; i < id2.length; i++) {\r\n            if (myOptions4 == id2[i]) {\r\n                branchid = id2[i - 1]\r\n            }\r\n        }\r\n        for (var i = 0; i < id3.length; i++) {\r\n            if (myOptions5 == id3[i]) {\r\n                branchManagerId = id3[i - 1]\r\n            }\r\n        }\r\n        for (var i = 0; i < id4.length; i++) {\r\n            if (myOptions6 == id4[i]) {\r\n                teamLeaderId = id4[i - 1]\r\n            }\r\n        }\r\n        const AddUser = {\r\n            id: 0,\r\n            firstName: firstName,\r\n            lastName: lastName,\r\n            email: email,\r\n            createdBy: 1,\r\n            lastActive: \"\",\r\n            userRoleId: catdurationid,\r\n            addedBy: 1,\r\n            password: password,\r\n            mobileNo: mobileNo,\r\n            alternateMobileNo: alternateMobileNo,\r\n            userName: userName,\r\n            recodStatus: 1,\r\n            branchId: branchid,\r\n            tlId: teamLeaderId,\r\n            branchManagerId: branchManagerId\r\n        }\r\n        // console.log({ AddUser })\r\n\r\n        await axios.post('https://43.204.38.243:3001/api/userMasterUpsert', AddUser,\r\n            { headers: headers }).catch((error) => { // error is handled in catch block\r\n                if (error.response) { // status code out of the range of 2xx\r\n                    // setErrorMessage(error.response.data.message);\r\n                    alert(error.response.data.message)\r\n                    console.log(\"Status :\" + error.response.status);\r\n                } else if (error.request) { // The request was made but no response was received\r\n                    console.log(error.request);\r\n                } else {// Error on setting up the request\r\n                    console.log('Error', error.message);\r\n                }\r\n            });\r\n\r\n    };\r\n\r\n    // const handleSubmit = (e) => {\r\n    //     e.preventDefault();\r\n    //     postData();\r\n    //     // changePage();\r\n    // };\r\n    const [showPassword, setShowPassword] = useState(false);\r\n\r\n    const handleClickShowPassword = () => setShowPassword((show) => !show);\r\n\r\n    const handleMouseDownPassword = (event) => {\r\n        event.preventDefault();\r\n    };\r\n    const branchName = window.localStorage.getItem('branchName');\r\n    const managerName = window.localStorage.getItem('userName');\r\n\r\n    const [validated, setValidated] = useState(false);\r\n    const handleSubmit1 = (event) => {\r\n        const form = event.currentTarget;\r\n        if (form.checkValidity() === false) {\r\n            event.preventDefault();\r\n            event.stopPropagation();\r\n            // alert(\"Please Provide appropriate Data\")\r\n        }\r\n        else if (form.checkValidity() != false) {\r\n            postData();\r\n            changePage();\r\n        }\r\n        setValidated(true);\r\n    };\r\n    return (\r\n        <Container>\r\n            <Box className=\"breadcrumb\">\r\n                <Breadcrumb\r\n                    routeSegments={[\r\n                        { name: 'Manage Employee', path: '/employees/manageAllEmployee' },\r\n                        { name: 'Add Employee Page' },\r\n                    ]}\r\n                />\r\n            </Box>\r\n            <Form noValidate validated={validated} onSubmit={handleSubmit1}>\r\n                <Row>\r\n                    <Col>\r\n                        <SimpleCard title=\"Fill Employee Detail's\">\r\n                            <Row>\r\n                                <Col md=\"6\">\r\n                                    <Form.Label>First Name</Form.Label>\r\n                                    <Form.Control\r\n                                        required\r\n                                        onChange={(e) => setfirstName(e.target.value)}\r\n                                        value={firstName}\r\n                                        placeholder=\"Enter the First Name\"\r\n                                    /><Form.Control.Feedback type=\"invalid\">\r\n                                        First Name is Required\r\n                                    </Form.Control.Feedback>\r\n                                </Col>\r\n                                <Col md=\"6\">\r\n                                    <Form.Label>Last Name</Form.Label>\r\n                                    <Form.Control\r\n                                        required\r\n                                        onChange={(e) => setlastName(e.target.value)}\r\n                                        value={lastName}\r\n                                        placeholder=\"Enter the Last Name\"\r\n                                    /><Form.Control.Feedback type=\"invalid\">\r\n                                        Last Name is Required\r\n                                    </Form.Control.Feedback>\r\n                                </Col>\r\n                            </Row>\r\n                            <Row>\r\n                                <Col md=\"6\">\r\n                                    <Form.Label>Mobile Number</Form.Label>\r\n                                    <InputGroup>\r\n                                        <InputGroup.Text id=\"basic-addon1\">\r\n                                            <Icon>phone</Icon>\r\n                                        </InputGroup.Text>\r\n                                        <Form.Control\r\n                                            required\r\n                                            onChange={(e) => setmobileNo(e.target.value)}\r\n                                            value={mobileNo}\r\n                                            placeholder=\"Enter the Mobile Number\"\r\n                                        /><Form.Control.Feedback type=\"invalid\">\r\n                                            Mobile Number is Required\r\n                                        </Form.Control.Feedback>\r\n                                    </InputGroup>\r\n                                </Col>\r\n                                <Col md=\"6\">\r\n                                    <Form.Label>Alternate Mobile</Form.Label>\r\n                                    <InputGroup>\r\n                                        <InputGroup.Text id=\"basic-addon1\">\r\n                                            <Icon>phone</Icon>\r\n                                        </InputGroup.Text>\r\n                                        <Form.Control\r\n                                            required\r\n                                            onChange={(e) => setalternateMobileNo(e.target.value)}\r\n                                            value={alternateMobileNo}\r\n                                            placeholder=\"Enter the Alternate Number\"\r\n                                        /></InputGroup>\r\n                                </Col>\r\n                            </Row>\r\n                            <Row>\r\n                                <Col md=\"6\">\r\n                                    <Form.Label>Email</Form.Label>\r\n                                    <InputGroup>\r\n                                        <InputGroup.Text id=\"basic-addon1\">\r\n                                            <Icon>email</Icon>\r\n                                        </InputGroup.Text>\r\n                                        <Form.Control\r\n                                            type='email'\r\n                                            required\r\n                                            onChange={(e) => setemail(e.target.value)}\r\n                                            value={email}\r\n                                            placeholder=\"Enter the personal Email Id\"\r\n                                        /><Form.Control.Feedback type=\"invalid\">\r\n                                            Email is Required\r\n                                        </Form.Control.Feedback>\r\n                                    </InputGroup>\r\n                                </Col>\r\n                                {(function () {\r\n                                    if (roleCode == \"ADMIN\") {\r\n                                        return <>\r\n                                            <Col md=\"6\">\r\n                                                <InputGroup>\r\n                                                    <Form.Label>Role</Form.Label>\r\n                                                </InputGroup>\r\n                                                <Autocomplete\r\n                                                    freeSolo\r\n                                                    autoComplete\r\n                                                    autoHighlight\r\n                                                    options={roleTo}\r\n                                                    value={myOptions3}\r\n                                                    onChange={(e) => {\r\n                                                        setMyOptions3(e.currentTarget.innerHTML);\r\n                                                        if (e.currentTarget.innerHTML == \"Branch Manager\") {\r\n                                                            setShowForm(true);\r\n                                                            setShowForm1(false);\r\n                                                            setShowForm2(false);\r\n                                                        }\r\n                                                        else if (e.currentTarget.innerHTML == \"Team Lead\") {\r\n                                                            setShowForm(false);\r\n                                                            setShowForm1(true);\r\n                                                            setShowForm2(false);\r\n                                                        }\r\n                                                        else if (e.currentTarget.innerHTML == \"Employee\") {\r\n                                                            setShowForm(false);\r\n                                                            setShowForm1(false);\r\n                                                            setShowForm2(true);\r\n                                                        }\r\n                                                        else {\r\n                                                            setShowForm(false);\r\n                                                            setShowForm1(false);\r\n                                                            setShowForm2(false);\r\n                                                        }\r\n                                                    }}\r\n                                                    renderInput={(params) => (\r\n                                                        <TextField\r\n                                                            {...params}\r\n                                                            required\r\n                                                            variant=\"outlined\"\r\n                                                            label=\"Select the Calalogue Duration\"\r\n                                                            size=\"small\"\r\n                                                        />\r\n                                                    )}\r\n                                                />\r\n\r\n                                            </Col>\r\n                                        </>;\r\n                                    }\r\n                                    else {\r\n                                        return <>\r\n                                            <Col md=\"6\">\r\n                                                <Form.Label>Branch Name</Form.Label>\r\n                                                <Form.Control\r\n                                                    disabled\r\n                                                    required\r\n                                                    value={branchName}\r\n                                                    placeholder=\"Enter the Branch Name\"\r\n                                                />\r\n                                            </Col>\r\n                                            <Col md=\"6\">\r\n                                                <Form.Label>Branch Manager</Form.Label>\r\n                                                <Form.Control\r\n                                                    disabled\r\n                                                    required\r\n                                                    // onChange={(e) => setemail(e.target.value)}\r\n                                                    value={managerName}\r\n                                                    placeholder=\"Enter the Branch Manager\"\r\n                                                />\r\n                                            </Col>\r\n                                            <Col xs={6}>\r\n                                                <FormControl sx={{ m: 0, minWidth: 550 }} size=\"small\" >\r\n\r\n                                                    <InputGroup>\r\n                                                        <Form.Label>Role</Form.Label>\r\n                                                    </InputGroup>\r\n                                                    <Select\r\n                                                        value={myOptions3}\r\n                                                        label=\"r\"\r\n                                                        onChange={(e) => setMyOptions3(e.target.value)}\r\n                                                    >\r\n                                                        <MenuItem value={3}>Employee</MenuItem>\r\n                                                        <MenuItem value={4}>Team Lead</MenuItem>\r\n                                                    </Select>\r\n                                                </FormControl>\r\n                                            </Col>\r\n\r\n                                        </>\r\n                                    }\r\n                                })()}\r\n\r\n                            </Row>\r\n                            {(function () {\r\n                                if (myOptions3 == 4) {\r\n                                    return <>\r\n                                        <Row>\r\n                                            <Col md=\"6\">\r\n                                                <InputGroup>\r\n                                                    <Form.Label>Team Leader</Form.Label>\r\n                                                </InputGroup>\r\n                                                <Autocomplete\r\n                                                    freeSolo\r\n                                                    autoComplete\r\n                                                    autoHighlight\r\n                                                    options={userTLData}\r\n                                                    value={myOptions6}\r\n                                                    onChange={(e) => setMyOptions6(e.currentTarget.innerHTML)}\r\n                                                    renderInput={(params) => (\r\n                                                        <TextField\r\n                                                            {...params}\r\n\r\n                                                            variant=\"outlined\"\r\n                                                            label=\"Select the Team Leader\"\r\n                                                            size=\"small\"\r\n                                                        />\r\n                                                    )}\r\n                                                />\r\n                                            </Col>\r\n                                        </Row>\r\n                                    </>;\r\n                                }\r\n                                else {\r\n                                    return <>\r\n                                    </>\r\n                                }\r\n                            })()}\r\n                            {\r\n                                showForm ? (\r\n                                    <Row>\r\n                                        <Col md=\"6\">\r\n                                            <InputGroup>\r\n                                                <Form.Label>Branch</Form.Label>\r\n                                            </InputGroup>\r\n                                            <Autocomplete\r\n                                                freeSolo\r\n                                                autoComplete\r\n                                                autoHighlight\r\n                                                options={officeTo}\r\n                                                value={myOptions4}\r\n                                                onChange={(e) => setMyOptions4(e.currentTarget.innerHTML)}\r\n                                                renderInput={(params) => (\r\n                                                    <TextField\r\n                                                        {...params}\r\n\r\n                                                        variant=\"outlined\"\r\n                                                        label=\"Select the Branch Name\"\r\n                                                        size=\"small\"\r\n                                                    />\r\n                                                )}\r\n                                            />\r\n                                        </Col>\r\n                                    </Row>\r\n\r\n                                ) : (\r\n                                    \"\"\r\n                                )\r\n                            }\r\n                            {\r\n                                showForm1 ? (\r\n                                    <Row>\r\n                                        <Col md=\"6\">\r\n                                            <InputGroup>\r\n                                                <Form.Label>Branch</Form.Label>\r\n                                            </InputGroup>\r\n                                            <Autocomplete\r\n                                                freeSolo\r\n                                                autoComplete\r\n                                                autoHighlight\r\n                                                options={officeTo}\r\n                                                value={myOptions4}\r\n                                                onChange={(e) => setMyOptions4(e.currentTarget.innerHTML)}\r\n                                                renderInput={(params) => (\r\n                                                    <TextField\r\n                                                        {...params}\r\n\r\n                                                        variant=\"outlined\"\r\n                                                        label=\"Select the Branch Name\"\r\n                                                        size=\"small\"\r\n                                                    />\r\n                                                )}\r\n                                            />\r\n                                        </Col>\r\n                                        <Col md=\"6\">\r\n                                            <InputGroup>\r\n                                                <Form.Label>Branch Manager</Form.Label>\r\n                                            </InputGroup>\r\n                                            <Autocomplete\r\n                                                freeSolo\r\n                                                autoComplete\r\n                                                autoHighlight\r\n                                                options={userData}\r\n                                                value={myOptions5}\r\n                                                onChange={(e) => setMyOptions5(e.currentTarget.innerHTML)}\r\n                                                renderInput={(params) => (\r\n                                                    <TextField\r\n                                                        {...params}\r\n\r\n                                                        variant=\"outlined\"\r\n                                                        label=\"Select the Branch Manager\"\r\n                                                        size=\"small\"\r\n                                                    />\r\n                                                )}\r\n                                            />\r\n                                        </Col>\r\n                                    </Row>\r\n                                ) : (\r\n                                    \"\"\r\n                                )\r\n                            }\r\n                            {\r\n                                showForm2 ? (\r\n                                    <>\r\n                                        <Row>\r\n                                            <Col md=\"6\">\r\n                                                <InputGroup>\r\n                                                    <Form.Label>Branch</Form.Label>\r\n                                                </InputGroup>\r\n                                                <Autocomplete\r\n                                                    freeSolo\r\n                                                    autoComplete\r\n                                                    autoHighlight\r\n                                                    options={officeTo}\r\n                                                    value={myOptions4}\r\n                                                    onChange={(e) => setMyOptions4(e.currentTarget.innerHTML)}\r\n                                                    renderInput={(params) => (\r\n                                                        <TextField\r\n                                                            {...params}\r\n\r\n                                                            variant=\"outlined\"\r\n                                                            label=\"Select the Branch Name\"\r\n                                                            size=\"small\"\r\n                                                        />\r\n                                                    )}\r\n                                                />\r\n                                            </Col>\r\n                                            <Col md=\"6\">\r\n                                                <InputGroup>\r\n                                                    <Form.Label>Branch Manager</Form.Label>\r\n                                                </InputGroup>\r\n                                                <Autocomplete\r\n                                                    freeSolo\r\n                                                    autoComplete\r\n                                                    autoHighlight\r\n                                                    options={userData}\r\n                                                    value={myOptions5}\r\n                                                    onChange={(e) => setMyOptions5(e.currentTarget.innerHTML)}\r\n                                                    renderInput={(params) => (\r\n                                                        <TextField\r\n                                                            {...params}\r\n\r\n                                                            variant=\"outlined\"\r\n                                                            label=\"Select the Branch Manager\"\r\n                                                            size=\"small\"\r\n                                                        />\r\n                                                    )}\r\n                                                />\r\n                                            </Col>\r\n                                        </Row>\r\n                                        <Row>\r\n                                            <Col md=\"6\">\r\n                                                <InputGroup>\r\n                                                    <Form.Label>Team Leader</Form.Label>\r\n                                                </InputGroup>\r\n                                                <Autocomplete\r\n                                                    freeSolo\r\n                                                    autoComplete\r\n                                                    autoHighlight\r\n                                                    options={userTLData}\r\n                                                    value={myOptions6}\r\n                                                    onChange={(e) => setMyOptions6(e.currentTarget.innerHTML)}\r\n                                                    renderInput={(params) => (\r\n                                                        <TextField\r\n                                                            {...params}\r\n\r\n                                                            variant=\"outlined\"\r\n                                                            label=\"Select the Team Leader\"\r\n                                                            size=\"small\"\r\n                                                        />\r\n                                                    )}\r\n                                                />\r\n                                            </Col>\r\n                                        </Row>\r\n                                    </>\r\n                                ) : (\r\n                                    \"\"\r\n                                )\r\n                            }\r\n\r\n\r\n                            <br />\r\n                            <h6 style={{ color: 'red' }}>User Credential's </h6>\r\n                            <Row>\r\n                                <Col>\r\n                                    <Form.Label>User Name </Form.Label>\r\n                                    <InputGroup>\r\n                                        <InputGroup.Text id=\"basic-addon1\">\r\n                                            <Icon>person</Icon>\r\n                                        </InputGroup.Text>\r\n                                        <Form.Control\r\n                                            required\r\n                                            onChange={(e) => setuserName(e.target.value)}\r\n                                            value={userName}\r\n                                            placeholder=\"Enter the User Name\"\r\n                                        /><Form.Control.Feedback type=\"invalid\">\r\n                                            User Name is Required\r\n                                        </Form.Control.Feedback>\r\n                                    </InputGroup>\r\n                                </Col>\r\n                                <Col>\r\n\r\n                                    <FormControl sx={{ width: \"100%\" }} variant=\"outlined\" >\r\n                                        <Form.Label>Password </Form.Label>\r\n                                        <OutlinedInput\r\n                                            required\r\n                                            size=\"small\"\r\n                                            id=\"outlined-adornment-password\"\r\n                                            onChange={(e) => setpassword(e.target.value)}\r\n                                            value={password}\r\n                                            type={showPassword ? 'text' : 'password'}\r\n                                            endAdornment={\r\n                                                <InputAdornment position=\"end\">\r\n                                                    <IconButton\r\n                                                        aria-label=\"toggle password visibility\"\r\n                                                        onClick={handleClickShowPassword}\r\n                                                        onMouseDown={handleMouseDownPassword}\r\n                                                        edge=\"end\"\r\n                                                    >\r\n                                                        {showPassword ? <VisibilityOff /> : <Visibility />}\r\n                                                    </IconButton>\r\n                                                </InputAdornment>\r\n                                            }\r\n                                            label=\"h\"\r\n                                        /><Form.Control.Feedback type=\"invalid\">\r\n                                            Password is Required\r\n                                        </Form.Control.Feedback>\r\n                                    </FormControl>\r\n                                    {/* <InputGroup>\r\n                                    <InputGroup.Text id=\"basic-addon1\">\r\n                                        <Icon>password</Icon>\r\n                                    </InputGroup.Text>\r\n                                    <Form.Control\r\n                                        type='password'\r\n                                        required\r\n                                        onChange={(e) => setpassword(e.target.value)}\r\n                                        value={password}\r\n                                        placeholder=\"Enter the Password\"\r\n                                    /></InputGroup> */}\r\n                                </Col>\r\n                            </Row>\r\n                        </SimpleCard>\r\n                    </Col>\r\n                </Row>\r\n                <Div className=\"mt-2\">\r\n                    <Row>\r\n                        <Col>\r\n                            <Button variant=\"secondary\" onClick={changePage}>\r\n                                Cancel\r\n                            </Button>\r\n                            &nbsp;\r\n                            <button type=\"submit\" className=\"btn btn-success\">\r\n                                Save\r\n                            </button>\r\n                        </Col>\r\n                    </Row>\r\n                </Div>\r\n            </Form>\r\n        </Container >\r\n    );\r\n};\r\n// Custom Style Section\r\nconst Container = styled('div')(({ theme }) => ({\r\n    margin: '30px',\r\n    [theme.breakpoints.down('sm')]: { margin: '16px' },\r\n    '& .breadcrumb': {\r\n        marginBottom: '30px',\r\n        [theme.breakpoints.down('sm')]: { marginBottom: '16px' },\r\n    },\r\n}));\r\nconst Div = styled('div')(() => ({\r\n    margin: '0px 0px 0px 441px',\r\n}));\r\nexport default AddEmployee;\r\n"],"sourceRoot":""}