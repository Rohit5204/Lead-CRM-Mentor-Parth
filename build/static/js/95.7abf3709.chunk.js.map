{"version":3,"sources":["app/views/sessions/JwtRegister.jsx"],"names":["FlexBox","styled","Box","display","alignItems","JustifyBox","justifyContent","ContentBox","height","padding","background","JWTRegister","minHeight","maxWidth","margin","borderRadius","initialValues","email","password","username","remember","validationSchema","Yup","shape","min","required","JwtRegister","theme","useTheme","register","useAuth","navigate","useNavigate","useState","loading","setLoading","className","container","item","sm","xs","width","alt","src","p","onSubmit","values","e","console","log","errors","touched","handleChange","handleBlur","handleSubmit","fullWidth","size","type","name","label","variant","onBlur","value","onChange","helperText","error","Boolean","sx","mb","gap","checked","fontSize","color","mt","to","style","palette","primary","main","marginLeft"],"mappings":"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","file":"static/js/95.7abf3709.chunk.js","sourcesContent":["import { useTheme } from '@emotion/react';\r\nimport { LoadingButton } from '@mui/lab';\r\nimport { Card, Checkbox, Grid, TextField } from '@mui/material';\r\nimport { Box, styled } from '@mui/system';\r\nimport { Paragraph } from 'app/components/Typography';\r\nimport useAuth from 'app/hooks/useAuth';\r\nimport { Formik } from 'formik';\r\nimport { useState } from 'react';\r\nimport { NavLink, useNavigate } from 'react-router-dom';\r\nimport * as Yup from 'yup';\r\n\r\nconst FlexBox = styled(Box)(() => ({ display: 'flex', alignItems: 'center' }));\r\n\r\nconst JustifyBox = styled(FlexBox)(() => ({ justifyContent: 'center' }));\r\n\r\nconst ContentBox = styled(JustifyBox)(() => ({\r\n  height: '100%',\r\n  padding: '32px',\r\n  background: 'rgba(0, 0, 0, 0.01)',\r\n}));\r\n\r\nconst JWTRegister = styled(JustifyBox)(() => ({\r\n  background: '#1A2038',\r\n  minHeight: '100vh !important',\r\n  '& .card': {\r\n    maxWidth: 800,\r\n    minHeight: 400,\r\n    margin: '1rem',\r\n    display: 'flex',\r\n    borderRadius: 12,\r\n    alignItems: 'center',\r\n  },\r\n}));\r\n\r\n// inital login credentials\r\nconst initialValues = {\r\n  email: '',\r\n  password: '',\r\n  username: '',\r\n  remember: true,\r\n};\r\n\r\n// form field validation schema\r\nconst validationSchema = Yup.object().shape({\r\n  password: Yup.string()\r\n    .min(6, 'Password must be 6 character length')\r\n    .required('Password is required!'),\r\n  email: Yup.string().email('Invalid Email address').required('Email is required!'),\r\n});\r\n\r\nconst JwtRegister = () => {\r\n  const theme = useTheme();\r\n  const { register } = useAuth();\r\n  const navigate = useNavigate();\r\n  const [loading, setLoading] = useState(false);\r\n\r\n  const handleFormSubmit = (values) => {\r\n    setLoading(true);\r\n\r\n    try {\r\n      register(values.email, values.username, values.password);\r\n      navigate('/');\r\n      setLoading(false);\r\n    } catch (e) {\r\n      console.log(e);\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <JWTRegister>\r\n      <Card className=\"card\">\r\n        <Grid container>\r\n          <Grid item sm={6} xs={12}>\r\n            <ContentBox>\r\n              <img\r\n                width=\"100%\"\r\n                alt=\"Register\"\r\n                src=\"/assets/images/illustrations/posting_photo.svg\"\r\n              />\r\n            </ContentBox>\r\n          </Grid>\r\n\r\n          <Grid item sm={6} xs={12}>\r\n            <Box p={4} height=\"100%\">\r\n              <Formik\r\n                onSubmit={handleFormSubmit}\r\n                initialValues={initialValues}\r\n                validationSchema={validationSchema}\r\n              >\r\n                {({ values, errors, touched, handleChange, handleBlur, handleSubmit }) => (\r\n                  <form onSubmit={handleSubmit}>\r\n                    <TextField\r\n                      fullWidth\r\n                      size=\"small\"\r\n                      type=\"text\"\r\n                      name=\"username\"\r\n                      label=\"Username\"\r\n                      variant=\"outlined\"\r\n                      onBlur={handleBlur}\r\n                      value={values.username}\r\n                      onChange={handleChange}\r\n                      helperText={touched.username && errors.username}\r\n                      error={Boolean(errors.username && touched.username)}\r\n                      sx={{ mb: 3 }}\r\n                    />\r\n\r\n                    <TextField\r\n                      fullWidth\r\n                      size=\"small\"\r\n                      type=\"email\"\r\n                      name=\"email\"\r\n                      label=\"Email\"\r\n                      variant=\"outlined\"\r\n                      onBlur={handleBlur}\r\n                      value={values.email}\r\n                      onChange={handleChange}\r\n                      helperText={touched.email && errors.email}\r\n                      error={Boolean(errors.email && touched.email)}\r\n                      sx={{ mb: 3 }}\r\n                    />\r\n                    <TextField\r\n                      fullWidth\r\n                      size=\"small\"\r\n                      name=\"password\"\r\n                      type=\"password\"\r\n                      label=\"Password\"\r\n                      variant=\"outlined\"\r\n                      onBlur={handleBlur}\r\n                      value={values.password}\r\n                      onChange={handleChange}\r\n                      helperText={touched.password && errors.password}\r\n                      error={Boolean(errors.password && touched.password)}\r\n                      sx={{ mb: 2 }}\r\n                    />\r\n\r\n                    <FlexBox gap={1} alignItems=\"center\">\r\n                      <Checkbox\r\n                        size=\"small\"\r\n                        name=\"remember\"\r\n                        onChange={handleChange}\r\n                        checked={values.remember}\r\n                        sx={{ padding: 0 }}\r\n                      />\r\n\r\n                      <Paragraph fontSize={13}>\r\n                        I have read and agree to the terms of service.\r\n                      </Paragraph>\r\n                    </FlexBox>\r\n\r\n                    <LoadingButton\r\n                      type=\"submit\"\r\n                      color=\"primary\"\r\n                      loading={loading}\r\n                      variant=\"contained\"\r\n                      sx={{ mb: 2, mt: 3 }}\r\n                    >\r\n                      Regiser\r\n                    </LoadingButton>\r\n\r\n                    <Paragraph>\r\n                      Already have an account?\r\n                      <NavLink\r\n                        to=\"/session/signin\"\r\n                        style={{ color: theme.palette.primary.main, marginLeft: 5 }}\r\n                      >\r\n                        Login\r\n                      </NavLink>\r\n                    </Paragraph>\r\n                  </form>\r\n                )}\r\n              </Formik>\r\n            </Box>\r\n          </Grid>\r\n        </Grid>\r\n      </Card>\r\n    </JWTRegister>\r\n  );\r\n};\r\n\r\nexport default JwtRegister;\r\n"],"sourceRoot":""}